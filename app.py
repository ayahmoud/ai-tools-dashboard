# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NbXgkMrZjrUiDMxKEOMK6LmAtuXZoHOJ
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np

st.set_page_config(page_title="AI Tools Dashboard", layout="wide")

st.title("AI Tools Evaluation Dashboard")
st.markdown("Interactive Analysis for 5 Key Departments")

# Sample data
tools_data = {
    "Tool_Name": ["DeepL Pro", "GitHub Copilot", "Salesforce Einstein", "Restb.ai", "Workday AI",
                  "Google Translate", "Tabnine", "HubSpot AI", "Zillow AI", "BambooHR"],
    "Department": ["Translation", "Product Development", "Sales", "Real Estate", "HR",
                   "Translation", "Product Development", "Sales", "Real Estate", "HR"],
    "Overall_Score": [9.2, 9.5, 9.1, 8.4, 8.7, 8.5, 8.8, 8.6, 8.9, 8.1],
    "Monthly_Cost": [30, 10, 150, 99, 85, 20, 12, 45, 0, 60],
    "Use_Case": ["Document Translation", "Code Generation", "CRM Enhancement", "Property Analysis", "Workforce Analytics",
                 "API Integration", "Code Completion", "Marketing Automation", "Price Prediction", "Employee Experience"]
}

df = pd.DataFrame(tools_data)

# Add Cost-Performance ratio
df['Cost_Performance'] = df['Overall_Score'] / df['Monthly_Cost']

# Sidebar filters
st.sidebar.header("Filters")
cost_range = st.sidebar.slider("Select Monthly Cost Range",
                               float(df['Monthly_Cost'].min()), float(df['Monthly_Cost'].max()),
                               (float(df['Monthly_Cost'].min()), float(df['Monthly_Cost'].max())))
use_cases = st.sidebar.multiselect("Select Use Cases", df["Use_Case"].unique(), default=df["Use_Case"].unique())

# Filter data
filtered_df = df[(df["Monthly_Cost"] >= cost_range[0]) &
                 (df["Monthly_Cost"] <= cost_range[1]) &
                 (df["Use_Case"].isin(use_cases))]

# Metrics
col1, col2, col3 = st.columns(3)

# Total tools per department
tools_per_dept = filtered_df.groupby("Department")["Tool_Name"].count().to_dict()
col1.metric("Total Tools per Department", ", ".join([f"{k}: {v}" for k, v in tools_per_dept.items()]))

# Highest scoring tool per department
highest_tools = filtered_df.loc[filtered_df.groupby("Department")["Overall_Score"].idxmax()]
col2.metric("Highest Scoring Tools", ", ".join([f"{row['Department']}: {row['Tool_Name']} ({row['Overall_Score']})"
                                                for _, row in highest_tools.iterrows()]))

# Average Cost-Performance ratio
col3.metric("Avg Cost-Performance Ratio", f"{filtered_df['Cost_Performance'].mean():.2f}")

# Heatmap of scores
heatmap_data = filtered_df.pivot_table(index='Department', columns='Use_Case', values='Overall_Score', fill_value=0)
fig_heatmap = px.imshow(heatmap_data, text_auto=True, color_continuous_scale='Blues', aspect="auto",
                        labels=dict(x="Use Case", y="Department", color="Score"),
                        title="Score Heatmap by Department and Use Case")

st.plotly_chart(fig_heatmap, use_container_width=True)

# Data table
st.subheader("Tool Details")
st.dataframe(filtered_df, use_container_width=True)

# CSV Download Button
csv = filtered_df.to_csv(index=False)
st.download_button(
    label="Download Filtered Data as CSV",
    data=csv,
    file_name='filtered_ai_tools.csv',
    mime='text/csv'
)